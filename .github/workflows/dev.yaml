name: Dev

on: [push]

defaults:
  run:
    shell: bash

jobs:
  build-runner:
    name: Build runner
    runs-on: [self-hosted, nix]
    strategy:
      matrix:
        arch:
          - x86_64-linux
          - x86_64-darwin
          - aarch64-darwin
    outputs:
      version: ${{ steps.determine-version.outputs.version }}
    steps:
      - uses: actions/checkout@ec3a7ce113134d7a93b817d10a8272cb61118579
        with:
          fetch-depth: 0

      - id: determine-version
        name: Determine current version
        run: |-
          CURRENT_VERSION=$(./release.sh get_release_version) || exit $?
          echo "::set-output name=version::${CURRENT_VERSION}"

      - name: Build intellijScalaRunners
        run: |-
          nix build -L -v --no-link '.#packages.${{ matrix.arch }}.intellijScalaRunners'

      - name: Build runner
        run: |-
          nix build -L -v --no-link '.#packages.${{ matrix.arch }}.runnerJre'

      - name: Cache runner
        env: 
          NIX_OUTPUT: .#packages.${{ matrix.arch }}.runnerJre
        run: |
          nix store sign "${NIX_OUTPUT}" -v -r -k ~/.secrets/nix-cache-private-key
          nix copy -v "${NIX_OUTPUT}" --to s3://nixed/cache

      - name: Cache intellijScalaRunners
        env:
          NIX_OUTPUT: .#packages.${{ matrix.arch }}.intellijScalaRunners
        run: |
          nix store sign "${NIX_OUTPUT}" -v -r -k ~/.secrets/nix-cache-private-key
          nix copy -v "${NIX_OUTPUT}" --to s3://nixed/cache

  build-images:
    name: Build images
    runs-on: [self-hosted, nix]
    needs: build-runner
    env:
      IMAGE_REPOSITORY: public.ecr.aws/shopstic
    strategy:
      matrix:
        arch:
          - x86_64
          - aarch64
    steps:
      - uses: actions/checkout@ec3a7ce113134d7a93b817d10a8272cb61118579

      - name: Login to Amazon ECR
        uses: ./.github/actions/login-to-public-ecr
        with:
          imageRepo: ${{ env.IMAGE_REPOSITORY }}

      - name: Build container images
        run: |-
          nix build -L -v '.#packages.${{ matrix.arch }}-linux.serverImage' 

      - name: Push
        env:
          GITHUB_SHA: ${{ github.sha }}  
          NIX_ARCH: ${{ matrix.arch }}
          RELEASE_VERSION: ${{ needs.build-runner.outputs.version }}
        shell: nix develop -v -c bash {0}
        run: |-
          IMAGE_ARCH="amd64"
          if [[ "${NIX_ARCH}" == "aarch64" ]]; then
            IMAGE_ARCH="arm64"
          fi

          IMAGE_TAG="${RELEASE_VERSION}-${IMAGE_ARCH}"
        
          skopeo --insecure-policy copy \
            docker-archive:./result \
            docker://"${IMAGE_REPOSITORY}"/toothpick-server:"${IMAGE_TAG}"

  push-manifest:
    name: Push multi-arch manifest
    runs-on: [self-hosted, nix]
    needs: [build-runner, build-images]
    env:
      IMAGE_REPOSITORY: public.ecr.aws/shopstic
    steps:
      - uses: actions/checkout@ec3a7ce113134d7a93b817d10a8272cb61118579
      
      - name: Login to Amazon ECR
        uses: ./.github/actions/login-to-public-ecr
        with:
          imageRepo: ${{ env.IMAGE_REPOSITORY }}

      - name: Push
        shell: nix develop -v -c bash {0}
        env:
          GITHUB_SHA: ${{ github.sha }}
          RELEASE_VERSION: ${{ needs.build-runner.outputs.version }}
        run: |-
          manifest-tool push from-args \
            --platforms linux/amd64,linux/arm64 \
            --template "${IMAGE_REPOSITORY}/toothpick-server:${RELEASE_VERSION}-ARCH" \
            --target "${IMAGE_REPOSITORY}/toothpick-server:${RELEASE_VERSION}"
  
  build-helm-chart:
    name: Build Helm chart
    runs-on: [self-hosted, nix]
    needs: [build-runner, build-images]
    env:
      IMAGE_REPOSITORY: public.ecr.aws/shopstic
    steps:
      - uses: actions/checkout@ec3a7ce113134d7a93b817d10a8272cb61118579

      - name: Login to Amazon ECR
        uses: ./.github/actions/login-to-public-ecr
        with:
          imageRepo: ${{ env.IMAGE_REPOSITORY }}

      - name: Build and push Helm Chart
        shell: nix develop -v -c bash {0}
        env:
          GITHUB_SHA: ${{ github.sha }}
          RELEASE_VERSION: ${{ needs.build-runner.outputs.version }}
        run: |-
          export HELM_REGISTRY_CONFIG=/home/runner/.docker/config.json
          ./release.sh push_helm_chart "${RELEASE_VERSION}" "${RELEASE_VERSION}" "oci://${IMAGE_REPOSITORY}/charts"
